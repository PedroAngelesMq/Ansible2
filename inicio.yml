---
  - name: Provision an EC2 Instance
    remote_user: ansible
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t1.micro
      security_group: default # Change the security group name here
      subnet_id: subnet-0498dcf174300ddef
      image: ami-6871a115 #"Red Hat Enterprise Linux 7.5 (HVM), SSD Volume Type - ami-6871a115"
      region: us-east-1 # Change the Region
      keypair: ansible # Change the keypair name
      tag_name: Intance_Ansible
      count: 2

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Launch the new EC2 Instance
        local_action: ec2
                      group={{ security_group }}
                      vpc_subnet_id={{ subnet_id }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      assign_public_ip=yes
                      monitoring=yes
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: "{{ tag_name }}"

        register: tag
      
      - name: Wait for SSH to come up
        wait_for:
          host: "{{ item.public_ip }}"
          port: 22
          state: started
        with_items: "{{ ec2.instances }}"
        
      - name: save private key
        copy:
          content: "{{ ec2.key.private_key }}" 
          dest: "./home/ubuntu/ansible.pem" 
          mode: 0600
        when: ec2.changed

      - name: Debug ec2.instances public_ip
        debug: var=ec2.instances[0].public_ip
        
      - name: output the IP
        debug: msg="Allocated IP inside a VPC is {{ ec2.public_ip }}"
        with_items: "{{ ec2.instances }}"
